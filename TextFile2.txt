 using System;

namespace TicTacToe
{
    class Program
    {
        static void Main(string[] args)
        {
            string[] Board;
            Board = new string[4];

            Board[0] = "   1 2 3 ";
            Board[1] = " 1 - - - ";
            Board[2] = " 2 - - - ";
            Board[3] = " 3 - - - ";

            Console.WriteLine("Welcome to the TicTacToe game");
            Console.WriteLine();
            Console.WriteLine(Board[0]);
            Console.WriteLine(Board[1]);
            Console.WriteLine(Board[2]);
            Console.WriteLine(Board[3]);
            string row;
            int column;
           // bool GameWon = (foundWinner(Board);

            bool CurrentPlayer = true;

            for (int i = 0, x = 1; i < x && !(foundWinner(Board)); i++, x++)
            {
                row = rowCheck();
                column = columnCheck();

                if (row == row1())
                {
                    if (column == 3)
                    {
                        if (openSlot(Board[1], column))
                        {
                            Board[1] = fixRow(Board[1], column, CurrentPlayer);
                            CurrentPlayer = switchturns(CurrentPlayer);
                        }
                    }
                    if (column == 5)
                    {
                        if (openSlot(Board[1], column))
                        {
                            Board[1] = fixRow(Board[1], column, CurrentPlayer);
                            CurrentPlayer = switchturns(CurrentPlayer);
                        }
                    }
                    if (column == 7)
                    {
                        if (openSlot(Board[1], column))
                        {
                            Board[1] = fixRow(Board[1], column, CurrentPlayer);
                            CurrentPlayer = switchturns(CurrentPlayer);
                        }
                    }
                }
                if (row == row2())
                {
                    if (column == 3)
                    {
                        if (openSlot(Board[2], column))
                        {
                            Board[2] = fixRow(Board[2], column, CurrentPlayer);
                            CurrentPlayer = switchturns(CurrentPlayer);
                        }
                    }
                    if (column == 5)
                    {
                        if (openSlot(Board[2], column))
                        {
                            Board[2] = fixRow(Board[2], column, CurrentPlayer);
                            CurrentPlayer = switchturns(CurrentPlayer);
                        }
                    }
                    if (column == 7)
                    {
                        if (openSlot(Board[2], column))
                        {
                            Board[2] = fixRow(Board[2], column, CurrentPlayer);
                            CurrentPlayer = switchturns(CurrentPlayer);
                        }
                    }
                }
                if (row == row3())
                {
                    if (column == 3)
                    {
                        if (openSlot(Board[3], column))
                        {
                            Board[3] = fixRow(Board[3], column, CurrentPlayer);
                            CurrentPlayer = switchturns(CurrentPlayer);
                        }
                    }
                    if (column == 5)
                    {
                        if (openSlot(Board[3], column))
                        {
                            Board[3] = fixRow(Board[3], column, CurrentPlayer);
                            CurrentPlayer = switchturns(CurrentPlayer);
                        }
                    }
                    if (column == 7)
                    {
                        if (openSlot(Board[3], column))
                        {
                            Board[3] = fixRow(Board[3], column, CurrentPlayer);
                            CurrentPlayer = switchturns(CurrentPlayer);
                        }
                    }
                }
                drewBoard(Board[0], Board[1], Board[2], Board[3]);                                                                                      
            }
            Console.WriteLine("Bravo");
        }       
        static string row1() // The first line
        {
            string row1 = " 1 1 2 3 ";
            return row1;
        }
        static string row2() // The second line
        {
            string row2 = " 2 1 2 3 ";
            return row2;
        }
        static string row3() // The third line
        {
            string row3 = " 3 1 2 3 ";
            return row3;
        }
        static string rowCheck() // in string
        {
            string row = "";

            while (row == "")
            {
                row += rowInput();
                switch (row)
                {
                    case "1":
                        row = row1();
                        break;
                    case "2":
                        row = row2();
                        break;
                    case "3":
                        row = row3();
                        break;

                    default:
                        rowInput();
                        break;
                }
            }
            return row;
        }
        static int columnCheck() // in integer
        {
            int result = 0;

            while (result < 3)
            {
                result = columnInput();
                
                switch (result)
                {
                    case 1:
                        result = 3;
                        break;
                    case 2:
                        result = 5;
                        break;
                    case 3:
                        result = 7;
                        break;

                    default:
                        columnInput();
                        break;
                }
            }
            return result;
        }
        static bool switchturns(bool CurrentPlayer) // Play with another player
        {
            return CurrentPlayer == true ? false : true;
        }
        static int rowInput() // row input
        {
            string input;
            Console.WriteLine("Enter which row you want and press ENTER");
            input = Console.ReadLine();
            while (!isValidInput(input))
            {
                Console.WriteLine("Invalid input, try again");
                input = Console.ReadLine();
            }
            int row = int.Parse(input);
            return row;
        }
        static int columnInput() // colum  input
        {
            string input;
            Console.WriteLine("Now enter which colum you want and press ENTER");
            input = Console.ReadLine();
            while (!isValidInput(input))
            {
                Console.WriteLine("Invalid input, try again");
                input = Console.ReadLine();
            }
            int colum = int.Parse(input);
            return colum;
        }
        static void drewBoard(string line0, string line1, string line2, string line3) // board drew
        {
            Console.WriteLine(line0); // the board itself
            Console.WriteLine(line1);
            Console.WriteLine(line2);
            Console.WriteLine(line3);
        }
        static bool foundWinner(string[] board) // the winner of the game
        {
            char middle = board[2][5];
            bool diagonal = false, row = false, column = false;
            while ((middle == '-') && (board[1][1] == '-') && (board[3][7] == '-'))
            {
                diagonal = middle == board[1][3] && middle == board[3][7] ||
                                middle == board[1][7] && middle == board[3][3];
            
            
            
                row = board[1][3] == board[1][5] && board[1][3] == board[1][7] ||
                           board[2][3] == board[2][5] && board[2][3] == board[2][7] ||
                           board[3][3] == board[3][5] && board[3][3] == board[3][7];
            
            
            
                column = board[1][3] == board[2][3] && board[1][3] == board[3][3] ||
                              board[1][5] == board[2][5] && board[1][5] == board[3][5] ||
                              board[1][7] == board[2][7] && board[1][7] == board[3][7];
            }

            return diagonal || row || column;
        }
        static bool openSlot(string row, int column)
        {
            return row[column] == '-';
        } 
        static string fixRow(string row, int col, bool player) // 
        {
            string result = "";
            string playerSymbol = player == true ? "X" : "O";
            for (int i = 0; i < row.Length; i++)
            {
                result += i == col ? playerSymbol : row[i].ToString();
            }
            return result;
        }
        static bool isValidInput(string input) // ENTER or SPACE typed
        {
            string trimmedInput = input.Trim();
            return input == "1" || input == "2" || input == "3";
        }
    }
}
